# –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª quick_test.py
"""–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏"""

import asyncio
import logging
from service_layer import create_hf_spaces_service_layer
from ui_components import UIComponentFactory  
from response_factory import StrategicResponseFactory
from event_system import EventOrchestrator
from app_logic import DocumentProcessingOrchestrator

async def test_architecture():
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏...")
    
    try:
        # –¢–µ—Å—Ç 1: Service Layer
        print("1Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Service Layer...")
        # –°—Ç–≤–æ—Ä—ñ—Ç—å –º–æ–∫ orchestrator –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        from core.modules import ProcessingConfig, ResourceManager, StreamlineFileHandler, HFConversionEngine
        from llm.gemini_connector import GeminiConnectionManager  
        from visualization.analytics_engine import QualityMetricsCalculator
        
        config = ProcessingConfig()
        resource_manager = ResourceManager(config)
        file_handler = StreamlineFileHandler(resource_manager)
        conversion_engine = HFConversionEngine(resource_manager, config)
        gemini_manager = GeminiConnectionManager()
        quality_calculator = QualityMetricsCalculator()
        
        orchestrator = DocumentProcessingOrchestrator(
            file_handler, conversion_engine, gemini_manager, quality_calculator
        )
        
        service_layer = create_hf_spaces_service_layer(orchestrator)
        health = service_layer.get_system_health()
        print(f"   ‚úÖ Service Layer: {health['overall_status']}")
        
        # –¢–µ—Å—Ç 2: UI Components
        print("2Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è UI Components...")
        ui_factory = UIComponentFactory({'title': 'Test Platform'})
        processing_tab = ui_factory.create_processing_tab()
        print("   ‚úÖ UI Components –≥–æ—Ç–æ–≤—ñ")
        
        # –¢–µ—Å—Ç 3: Response Factory
        print("3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Response Factory...")
        response_factory = StrategicResponseFactory()
        metrics = response_factory.get_factory_metrics()
        print(f"   ‚úÖ Response Factory: {metrics['factory_health']}")
        
        # –¢–µ—Å—Ç 4: Event System
        print("4Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Event System...")
        event_orchestrator = EventOrchestrator(service_layer, response_factory)
        event_metrics = event_orchestrator.get_orchestrator_metrics()
        print(f"   ‚úÖ Event System: {len(event_metrics['handlers_registered'])} handlers")
        
        print("\nüéâ –í—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏ –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—ñ: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_architecture())
    exit(0 if success else 1)